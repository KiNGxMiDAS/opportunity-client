/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RelationshipStruct = {
  valuePtr: string;
  id: BigNumberish;
  escrow: string;
  marketPtr: BigNumberish;
  employer: string;
  worker: string;
  taskMetadataPtr: string;
  contractStatus: BigNumberish;
  contractOwnership: BigNumberish;
  contractPayoutType: BigNumberish;
  wad: BigNumberish;
  acceptanceTimestamp: BigNumberish;
  resolutionTimestamp: BigNumberish;
};

export type RelationshipStructOutput = [
  string,
  BigNumber,
  string,
  BigNumber,
  string,
  string,
  string,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  valuePtr: string;
  id: BigNumber;
  escrow: string;
  marketPtr: BigNumber;
  employer: string;
  worker: string;
  taskMetadataPtr: string;
  contractStatus: number;
  contractOwnership: number;
  contractPayoutType: number;
  wad: BigNumber;
  acceptanceTimestamp: BigNumber;
  resolutionTimestamp: BigNumber;
};

export interface IGigEarthInterface extends utils.Interface {
  functions: {
    "getRelationshipData(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getRelationshipData",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRelationshipData",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGigEarth extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGigEarthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getRelationshipData(
      _relationshipID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getRelationshipData(
    _relationshipID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getRelationshipData(
      _relationshipID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RelationshipStructOutput>;
  };

  filters: {};

  estimateGas: {
    getRelationshipData(
      _relationshipID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRelationshipData(
      _relationshipID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
