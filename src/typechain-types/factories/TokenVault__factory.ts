/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TokenVault, TokenVaultInterface } from "../TokenVault";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "serviceToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lockedAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lockedUntil",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lockedDuration",
        type: "uint256",
      },
    ],
    name: "Locked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_llHead",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "serviceToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxEntries",
        type: "uint256",
      },
    ],
    name: "getLockedEntries",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "lockedUntil",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lockedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct LockedEntry[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenFactory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "serviceToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "serviceToken",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "untils",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c9b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630852c9ea1461005c57806318999dce1461007157806385a74921146100af578063c4d66de8146100c2578063d2dba157146100d5575b600080fd5b61006f61006a366004610992565b6100f5565b005b61009c61007f3660046109d8565b603460209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61006f6100bd366004610a0b565b6104a0565b61006f6100d0366004610a97565b6106c8565b6100e86100e3366004610ab2565b6107c7565b6040516100a69190610aee565b6000821161013d5760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b216b23ab930ba34b7b760811b60448201526064015b60405180910390fd5b603354604051631c88941d60e11b81526001600160a01b03868116600483015290911690633911283a90602401606060405180830381865afa158015610187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ab9190610b63565b516101e85760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b216ba37b5b2b760991b6044820152606401610134565b600083116102295760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a590b585b5bdd5b9d60921b6044820152606401610134565b604051636eb1769f60e11b815233600482015230602482015283906001600160a01b0386169063dd62ed3e90604401602060405180830381865afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102999190610bd2565b10156102e05760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e742d616c6c6f77616e636560501b6044820152606401610134565b6040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b038516906323b872dd906064016020604051808303816000875af1158015610333573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103579190610beb565b6103955760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8b59985a5b1959608a1b6044820152606401610134565b60006103a18342610927565b905060006103b0868484610933565b600181015490915081906103c49087610927565b6001820155805461043e578281556000600282018190556001600160a01b038881168252603460209081526040808420928816845291905290205460038201819055801561041457600281018390555b506001600160a01b0380881660009081526034602090815260408083209388168352929052208290555b604080516001600160a01b03808a1682528616602082015290810187905260608101849052608081018690527fc392e99d431032ac14a872985e1784cd90533e27608253c002a198d8e6358ed99060a00160405180910390a150505050505050565b426000805b848110156106085760008686838181106104c1576104c1610c06565b9050602002013590508084116105055760405162461bcd60e51b8152602060048201526009602482015268746f6f2d6561726c7960b81b6044820152606401610134565b6000610512893384610933565b805490915081906105555760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a590b5d5b9d1a5b609a1b6044820152606401610134565b6001810154610565908690610927565b60038201549095501561058a57600061057f826003015490565b600280840154910155505b6002810154156105b05760006105a1826002015490565b600380840154910155506105da565b60038101546001600160a01b038b1660009081526034602090815260408083203384529091529020555b600080825560018201819055600282018190556003820155505050808061060090610c32565b9150506104a5565b5080156106c05760405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905287169063a9059cbb906044016020604051808303816000875af115801561065e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106829190610beb565b6106c05760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8b59985a5b1959608a1b6044820152606401610134565b505050505050565b600054610100900460ff16806106dd5750303b155b806106eb575060005460ff16155b61072d5760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e4b5a5b9a5d1a585b1a5e9959606a1b6044820152606401610134565b600054610100900460ff1615801561074f576000805461ffff19166101011790555b6001600160a01b0382166107965760405162461bcd60e51b815260206004820152600e60248201526d696e76616c69642d706172616d7360901b6044820152606401610134565b603380546001600160a01b0319166001600160a01b03841617905580156107c3576000805461ff00191690555b5050565b6001600160a01b0380841660009081526034602090815260408083209386168352929052908120546060915b811580159061080157508381105b1561081f57610811600182610c4d565b6003909201549190506107f3565b806108305750606091506109209050565b60008167ffffffffffffffff81111561084b5761084b610b3d565b60405190808252806020026020018201604052801561089057816020015b60408051808201909152600080825260208201528152602001906001900390816108695790505b506001600160a01b038089166000908152603460209081526040808320938b1683529290529081205494509091505b831561091a5760408051808201909152845481526001850154602082015282518591908490849081106108f4576108f4610c06565b6020026020010181905250818061090a90610c32565b92505080600301549450506108bf565b50925050505b9392505050565b60006109208284610c4d565b604080516001600160a01b039485166020808301919091529390941684820152606080850192909252805180850390920182526080909301909252815191012090565b80356001600160a01b038116811461098d57600080fd5b919050565b600080600080608085870312156109a857600080fd5b6109b185610976565b935060208501359250604085013591506109cd60608601610976565b905092959194509250565b600080604083850312156109eb57600080fd5b6109f483610976565b9150610a0260208401610976565b90509250929050565b60008060008060608587031215610a2157600080fd5b610a2a85610976565b9350602085013567ffffffffffffffff80821115610a4757600080fd5b818701915087601f830112610a5b57600080fd5b813581811115610a6a57600080fd5b8860208260051b8501011115610a7f57600080fd5b6020830195508094505050506109cd60408601610976565b600060208284031215610aa957600080fd5b61092082610976565b600080600060608486031215610ac757600080fd5b610ad084610976565b9250610ade60208501610976565b9150604084013590509250925092565b602080825282518282018190526000919060409081850190868401855b82811015610b3057815180518552860151868501529284019290850190600101610b0b565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b8051801515811461098d57600080fd5b600060608284031215610b7557600080fd5b6040516060810181811067ffffffffffffffff82111715610ba657634e487b7160e01b600052604160045260246000fd5b604052610bb283610b53565b815260208301516020820152604083015160408201528091505092915050565b600060208284031215610be457600080fd5b5051919050565b600060208284031215610bfd57600080fd5b61092082610b53565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610c4657610c46610c1c565b5060010190565b60008219821115610c6057610c60610c1c565b50019056fea264697066735822122089cde93e90d30e32325bebf22051c1fbe723d2718caa527e5183c0d88de6690864736f6c634300080a0033";

type TokenVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenVault__factory extends ContractFactory {
  constructor(...args: TokenVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenVault> {
    return super.deploy(overrides || {}) as Promise<TokenVault>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TokenVault {
    return super.attach(address) as TokenVault;
  }
  connect(signer: Signer): TokenVault__factory {
    return super.connect(signer) as TokenVault__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenVaultInterface {
    return new utils.Interface(_abi) as TokenVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenVault {
    return new Contract(address, _abi, signerOrProvider) as TokenVault;
  }
}
