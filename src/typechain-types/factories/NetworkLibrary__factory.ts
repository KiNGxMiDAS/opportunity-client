/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NetworkLibrary,
  NetworkLibraryInterface,
} from "../NetworkLibrary";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_available",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_required",
        type: "uint256",
      },
    ],
    name: "InsufficientPayment",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ruling",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_numberOfChoices",
        type: "uint256",
      },
    ],
    name: "InvalidRuling",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidStatus",
    type: "error",
  },
  {
    inputs: [],
    name: "NotArbitrator",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPayer",
    type: "error",
  },
  {
    inputs: [],
    name: "PayeeDepositStillPending",
    type: "error",
  },
  {
    inputs: [],
    name: "ReclaimedTooLate",
    type: "error",
  },
  {
    inputs: [],
    name: "ReleasedTooEarly",
    type: "error",
  },
  {
    inputs: [],
    name: "ThirdPartyNotAllowed",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220db47b468b4f4c36d9f42961dfbab9fe432bde3c9421c8247e985d0ac4389a55864736f6c634300080a0033";

type NetworkLibraryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NetworkLibraryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NetworkLibrary__factory extends ContractFactory {
  constructor(...args: NetworkLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NetworkLibrary> {
    return super.deploy(overrides || {}) as Promise<NetworkLibrary>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NetworkLibrary {
    return super.attach(address) as NetworkLibrary;
  }
  connect(signer: Signer): NetworkLibrary__factory {
    return super.connect(signer) as NetworkLibrary__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NetworkLibraryInterface {
    return new utils.Interface(_abi) as NetworkLibraryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NetworkLibrary {
    return new Contract(address, _abi, signerOrProvider) as NetworkLibrary;
  }
}
