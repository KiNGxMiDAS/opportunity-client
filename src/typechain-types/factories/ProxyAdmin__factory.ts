/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ProxyAdmin, ProxyAdminInterface } from "../ProxyAdmin";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract AdminUpgradeabilityProxy",
        name: "proxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeProxyAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract AdminUpgradeabilityProxy",
        name: "proxy",
        type: "address",
      },
    ],
    name: "getProxyAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract AdminUpgradeabilityProxy",
        name: "proxy",
        type: "address",
      },
    ],
    name: "getProxyImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract AdminUpgradeabilityProxy",
        name: "proxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract AdminUpgradeabilityProxy",
        name: "proxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106fd3803806106fd83398101604081905261002f916100e5565b6100388161003e565b50610115565b6001600160a01b0381166100845760405162461bcd60e51b81526020600482015260096024820152683d32b93796b0b2323960b91b604482015260640160405180910390fd5b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f0384899bd253d83b23daa4d29aaa2efe0563d1132b43101e9ad667235aeb951b910160405180910390a15050565b6000602082840312156100f757600080fd5b81516001600160a01b038116811461010e57600080fd5b9392505050565b6105d9806101246000396000f3fe6080604052600436106100705760003560e01c8063893d20e81161004e578063893d20e8146100f35780639623609d1461011157806399a88ec414610124578063f3b7dead1461014457600080fd5b806313af403514610075578063204e1c7a146100975780637eff275e146100d3575b600080fd5b34801561008157600080fd5b506100956100903660046103d8565b610164565b005b3480156100a357600080fd5b506100b76100b23660046103d8565b610170565b6040516001600160a01b03909116815260200160405180910390f35b3480156100df57600080fd5b506100956100ee3660046103fc565b610201565b3480156100ff57600080fd5b506000546001600160a01b03166100b7565b61009561011f36600461044b565b610261565b34801561013057600080fd5b5061009561013f3660046103fc565b6102c8565b34801561015057600080fd5b506100b761015f3660046103d8565b6102f6565b61016d8161031c565b50565b6000806000836001600160a01b031660405161019690635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101d1576040519150601f19603f3d011682016040523d82523d6000602084013e6101d6565b606091505b5091509150816101e557600080fd5b808060200190518101906101f99190610521565b949350505050565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561024557600080fd5b505af1158015610259573d6000803e3d6000fd5b505050505050565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610291908690869060040161053e565b6000604051808303818588803b1580156102aa57600080fd5b505af11580156102be573d6000803e3d6000fd5b5050505050505050565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe69060240161022b565b6000806000836001600160a01b0316604051610196906303e1469160e61b815260040190565b6001600160a01b0381166103625760405162461bcd60e51b81526020600482015260096024820152683d32b93796b0b2323960b91b604482015260640160405180910390fd5b600080546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f0384899bd253d83b23daa4d29aaa2efe0563d1132b43101e9ad667235aeb951b910160405180910390a15050565b6001600160a01b038116811461016d57600080fd5b6000602082840312156103ea57600080fd5b81356103f5816103c3565b9392505050565b6000806040838503121561040f57600080fd5b823561041a816103c3565b9150602083013561042a816103c3565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561046057600080fd5b833561046b816103c3565b9250602084013561047b816103c3565b9150604084013567ffffffffffffffff8082111561049857600080fd5b818601915086601f8301126104ac57600080fd5b8135818111156104be576104be610435565b604051601f8201601f19908116603f011681019083821181831017156104e6576104e6610435565b816040528281528960208487010111156104ff57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561053357600080fd5b81516103f5816103c3565b60018060a01b038316815260006020604081840152835180604085015260005b8181101561057a5785810183015185820160600152820161055e565b8181111561058c576000606083870101525b50601f01601f19169290920160600194935050505056fea264697066735822122079635f2b76a231c888782af42e3b2c0a1962b6c79703457b51dabccffb66246564736f6c634300080a0033";

type ProxyAdminConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyAdminConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProxyAdmin__factory extends ContractFactory {
  constructor(...args: ProxyAdminConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProxyAdmin> {
    return super.deploy(owner, overrides || {}) as Promise<ProxyAdmin>;
  }
  getDeployTransaction(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(owner, overrides || {});
  }
  attach(address: string): ProxyAdmin {
    return super.attach(address) as ProxyAdmin;
  }
  connect(signer: Signer): ProxyAdmin__factory {
    return super.connect(signer) as ProxyAdmin__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyAdminInterface {
    return new utils.Interface(_abi) as ProxyAdminInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProxyAdmin {
    return new Contract(address, _abi, signerOrProvider) as ProxyAdmin;
  }
}
