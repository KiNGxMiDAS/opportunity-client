/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestCDai, TestCDaiInterface } from "../TestCDai";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dai",
        type: "address",
      },
      {
        internalType: "address",
        name: "comp",
        type: "address",
      },
      {
        internalType: "address",
        name: "comptroller_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "accrueInterest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "comptroller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRateStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "mintAmount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "redeemAmount",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "redeemAmount",
        type: "uint256",
      },
    ],
    name: "redeemUnderlying",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "exchangeRate",
        type: "uint256",
      },
    ],
    name: "setExchangeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200154938038062001549833981016040819052620000349162000192565b6040805180820182526004808252636344616960e01b6020808401828152855180870190965292855284015281519192916200007391600391620000cf565b50805162000089906004906020840190620000cf565b5050600580546001600160a01b039586166001600160a01b0319918216179091556006805494861694821694909417909355506008805491909316911617905562000219565b828054620000dd90620001dc565b90600052602060002090601f0160209004810192826200010157600085556200014c565b82601f106200011c57805160ff19168380011785556200014c565b828001600101855582156200014c579182015b828111156200014c5782518255916020019190600101906200012f565b506200015a9291506200015e565b5090565b5b808211156200015a57600081556001016200015f565b80516001600160a01b03811681146200018d57600080fd5b919050565b600080600060608486031215620001a857600080fd5b620001b38462000175565b9250620001c36020850162000175565b9150620001d36040850162000175565b90509250925092565b600181811c90821680620001f157607f821691505b602082108114156200021357634e487b7160e01b600052602260045260246000fd5b50919050565b61132080620002296000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063852a12e3116100a2578063a6afed9511610071578063a6afed9514610230578063a9059cbb14610237578063db006a751461024a578063db068e0e1461025d578063dd62ed3e1461027257600080fd5b8063852a12e3146101ef57806395d89b4114610202578063a0712d681461020a578063a457c2d71461021d57600080fd5b806323b872dd116100e957806323b872dd14610176578063313ce5671461018957806339509351146101985780635fe3b567146101ab57806370a08231146101c657600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c578063182df0f51461016e575b600080fd5b610123610285565b60405161013091906110b0565b60405180910390f35b61014c610147366004611121565b610317565b6040519015158152602001610130565b6002545b604051908152602001610130565b600754610160565b61014c61018436600461114b565b61032f565b60405160128152602001610130565b61014c6101a6366004611121565b610353565b6008546040516001600160a01b039091168152602001610130565b6101606101d4366004611187565b6001600160a01b031660009081526020819052604090205490565b6101606101fd3660046111a2565b610375565b61012361057d565b6101606102183660046111a2565b61058c565b61014c61022b366004611121565b6107a6565b6000610160565b61014c610245366004611121565b610821565b6101606102583660046111a2565b61082f565b61027061026b3660046111a2565b6109da565b005b6101606102803660046111bb565b610a44565b606060038054610294906111ee565b80601f01602080910402602001604051908101604052809291908181526020018280546102c0906111ee565b801561030d5780601f106102e25761010080835404028352916020019161030d565b820191906000526020600020905b8154815290600101906020018083116102f057829003601f168201915b5050505050905090565b600033610325818585610a6f565b5060019392505050565b60003361033d858285610b94565b610348858585610c0e565b506001949350505050565b6000336103258185856103668383610a44565b610370919061123f565b610a6f565b60008061038a8361038560075490565b610ddc565b336000908152602081905260409020549091508111156104035760405162461bcd60e51b815260206004820152602960248201527f634461692072656465656d556e6465726c79696e673a206e6f7420656e6f7567604482015268682062616c616e636560b81b60648201526084015b60405180910390fd5b61040d3382610dfc565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047a9190611257565b9050838110156104ff576005546001600160a01b03166340c10f19306104a08488611270565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156104e657600080fd5b505af11580156104fa573d6000803e3d6000fd5b505050505b60055460405163a9059cbb60e01b8152336004820152602481018690526001600160a01b039091169063a9059cbb906044015b6020604051808303816000875af1158015610551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105759190611287565b505050919050565b606060048054610294906111ee565b600554604051636eb1769f60e11b815233600482015230602482015260009183916001600160a01b039091169063dd62ed3e90604401602060405180830381865afa1580156105df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106039190611257565b10156106515760405162461bcd60e51b815260206004820152601f60248201527f63446169206d696e743a206e6f7420656e6f75676820616c6c6f77616e63650060448201526064016103fa565b6005546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190611287565b6107185760405162461bcd60e51b815260206004820152601e60248201527f63446169206d696e743a20646169207472616e73666572206661696c6564000060448201526064016103fa565b60006107278361038560075490565b90506107333382610f42565b6006546040516340c10f1960e01b8152336004820152670de0b6b3a764000060248201819052916001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b505050505050919050565b600033816107b48286610a44565b9050838110156108145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103fa565b6103488286868403610a6f565b600033610325818585610c0e565b3360009081526020819052604081205482111561088e5760405162461bcd60e51b815260206004820152601f60248201527f634461692072656465656d3a206e6f7420656e6f7567682062616c616e63650060448201526064016103fa565b6108983383610dfc565b60006108ac6108a660075490565b84611021565b6005546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190611257565b9050818110156109a3576005546001600160a01b03166340c10f19306109448486611270565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561098a57600080fd5b505af115801561099e573d6000803e3d6000fd5b505050505b60055460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401610532565b600754811015610a3f5760405162461bcd60e51b815260206004820152602a60248201527f54657374434461693a206e65772065786368616e67652072617465206d757374604482015269103132903630b933b2b960b11b60648201526084016103fa565b600755565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b038316610ad15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103fa565b6001600160a01b038216610b325760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103fa565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610ba08484610a44565b90506000198114610c085781811015610bfb5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103fa565b610c088484848403610a6f565b50505050565b6001600160a01b038316610c725760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103fa565b6001600160a01b038216610cd45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103fa565b6001600160a01b03831660009081526020819052604090205481811015610d4c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103fa565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610d8390849061123f565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610dcf91815260200190565b60405180910390a3610c08565b600080610de9848461102e565b9050610df48161104f565b949350505050565b6001600160a01b038216610e5c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103fa565b6001600160a01b03821660009081526020819052604090205481811015610ed05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103fa565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610eff908490611270565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610b87565b6001600160a01b038216610f985760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103fa565b8060026000828254610faa919061123f565b90915550506001600160a01b03821660009081526020819052604081208054839290610fd790849061123f565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600080610de98484611069565b600080611043670de0b6b3a76400008561107c565b9050610df48184611088565b6000611063670de0b6b3a7640000836112a9565b92915050565b6000611075838361107c565b9392505050565b600061107582846112cb565b60008061109d84670de0b6b3a764000061107c565b9050610df48184600061107582846112a9565b600060208083528351808285015260005b818110156110dd578581018301518582016040015282016110c1565b818111156110ef576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461111c57600080fd5b919050565b6000806040838503121561113457600080fd5b61113d83611105565b946020939093013593505050565b60008060006060848603121561116057600080fd5b61116984611105565b925061117760208501611105565b9150604084013590509250925092565b60006020828403121561119957600080fd5b61107582611105565b6000602082840312156111b457600080fd5b5035919050565b600080604083850312156111ce57600080fd5b6111d783611105565b91506111e560208401611105565b90509250929050565b600181811c9082168061120257607f821691505b6020821081141561122357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561125257611252611229565b500190565b60006020828403121561126957600080fd5b5051919050565b60008282101561128257611282611229565b500390565b60006020828403121561129957600080fd5b8151801515811461107557600080fd5b6000826112c657634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156112e5576112e5611229565b50029056fea2646970667358221220a295481f0cbbd99dae372a0e003cb74f50ba0d51bab26c8a78cca1555c6e177c64736f6c634300080a0033";

type TestCDaiConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCDaiConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCDai__factory extends ContractFactory {
  constructor(...args: TestCDaiConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    dai: string,
    comp: string,
    comptroller_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestCDai> {
    return super.deploy(
      dai,
      comp,
      comptroller_,
      overrides || {}
    ) as Promise<TestCDai>;
  }
  getDeployTransaction(
    dai: string,
    comp: string,
    comptroller_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(dai, comp, comptroller_, overrides || {});
  }
  attach(address: string): TestCDai {
    return super.attach(address) as TestCDai;
  }
  connect(signer: Signer): TestCDai__factory {
    return super.connect(signer) as TestCDai__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCDaiInterface {
    return new utils.Interface(_abi) as TestCDaiInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCDai {
    return new Contract(address, _abi, signerOrProvider) as TestCDai;
  }
}
