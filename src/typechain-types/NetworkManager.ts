/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RelationshipStruct = {
  employer: string;
  worker: string;
  taskMetadataPtr: string;
  contractOwnership: BigNumberish;
  wad: BigNumberish;
  acceptanceTimestamp: BigNumberish;
  resolutionTimestamp: BigNumberish;
  marketId: BigNumberish;
};

export type RelationshipStructOutput = [
  string,
  string,
  string,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  employer: string;
  worker: string;
  taskMetadataPtr: string;
  contractOwnership: number;
  wad: BigNumber;
  acceptanceTimestamp: BigNumber;
  resolutionTimestamp: BigNumber;
  marketId: BigNumber;
};

export type ServiceStruct = {
  marketId: BigNumberish;
  owner: string;
  metadataPtr: string;
  wad: BigNumberish[];
  referralShare: BigNumberish;
  exist: boolean;
  id: BigNumberish;
  collectModule: string;
};

export type ServiceStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber[],
  BigNumber,
  boolean,
  BigNumber,
  string
] & {
  marketId: BigNumber;
  owner: string;
  metadataPtr: string;
  wad: BigNumber[];
  referralShare: BigNumber;
  exist: boolean;
  id: BigNumber;
  collectModule: string;
};

export type EIP712SignatureStruct = {
  v: BigNumberish;
  r: BytesLike;
  s: BytesLike;
  deadline: BigNumberish;
};

export type EIP712SignatureStructOutput = [
  number,
  string,
  string,
  BigNumber
] & { v: number; r: string; s: string; deadline: BigNumber };

export type CreateProfileDataStruct = {
  to: string;
  handle: string;
  imageURI: string;
  followModule: string;
  followModuleInitData: BytesLike;
  followNFTURI: string;
};

export type CreateProfileDataStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string
] & {
  to: string;
  handle: string;
  imageURI: string;
  followModule: string;
  followModuleInitData: string;
  followNFTURI: string;
};

export interface NetworkManagerInterface extends utils.Interface {
  functions: {
    "LENS_CONTENT_REFERENCE_MODULE()": FunctionFragment;
    "LENS_FOLLOW_MODULE()": FunctionFragment;
    "_dai()": FunctionFragment;
    "_tokenFactory()": FunctionFragment;
    "addressToLensProfileId(address)": FunctionFragment;
    "arbitrationFeeDepositPeriod()": FunctionFragment;
    "arbitrator()": FunctionFragment;
    "createContract(uint256,string)": FunctionFragment;
    "createService(uint256,string,uint256[],uint256,address)": FunctionFragment;
    "depositArbitrationFeeForPayee(uint256)": FunctionFragment;
    "disputeIDtoRelationshipID(uint256)": FunctionFragment;
    "disputeRelationship(uint256)": FunctionFragment;
    "getContractData(uint256)": FunctionFragment;
    "getContracts()": FunctionFragment;
    "getLensProfileIdFromAddress(address)": FunctionFragment;
    "getProtocolFee()": FunctionFragment;
    "getPubIdFromServiceId(uint256)": FunctionFragment;
    "getPurchaseIdFromServiceId(uint256)": FunctionFragment;
    "getServiceData(uint256)": FunctionFragment;
    "getServices()": FunctionFragment;
    "getVerifiedFreelancers()": FunctionFragment;
    "getWaitlistLength(uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "grantProposalRequest(uint256,address,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "isRegisteredUser(address)": FunctionFragment;
    "lensHub()": FunctionFragment;
    "proxyProfileCreator()": FunctionFragment;
    "purchaseServiceOffering(uint256,address,uint8,(uint8,bytes32,bytes32,uint256))": FunctionFragment;
    "purchasedServiceIdToMetdata(uint256)": FunctionFragment;
    "registerWorker((address,string,string,address,bytes,string))": FunctionFragment;
    "relationshipIDToEscrowDetails(uint256)": FunctionFragment;
    "relationshipIDToMarketID(uint256)": FunctionFragment;
    "relationshipIDToRelationship(uint256)": FunctionFragment;
    "relationships(uint256)": FunctionFragment;
    "releaseContract(uint256)": FunctionFragment;
    "remainingTimeToDepositArbitrationFee(uint256)": FunctionFragment;
    "resolveContract(uint256,string)": FunctionFragment;
    "resolveService(uint256,uint256)": FunctionFragment;
    "rule(uint256,uint256)": FunctionFragment;
    "serviceIDToMarketID(uint256)": FunctionFragment;
    "serviceIdToPublicationId(uint256)": FunctionFragment;
    "serviceIdToPurchaseId(uint256)": FunctionFragment;
    "serviceIdToService(uint256)": FunctionFragment;
    "services(uint256)": FunctionFragment;
    "setLensContentReferenceModule(address)": FunctionFragment;
    "setLensFollowModule(address)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "submitEvidence(uint256,string)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateTaskMetadataPointer(uint256,string)": FunctionFragment;
    "verifiedFreelancers(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LENS_CONTENT_REFERENCE_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LENS_FOLLOW_MODULE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_dai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_tokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressToLensProfileId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrationFeeDepositPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createService",
    values: [BigNumberish, string, BigNumberish[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositArbitrationFeeForPayee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeIDtoRelationshipID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeRelationship",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLensProfileIdFromAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPubIdFromServiceId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPurchaseIdFromServiceId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getServices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedFreelancers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWaitlistLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantProposalRequest",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredUser",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lensHub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxyProfileCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseServiceOffering",
    values: [BigNumberish, string, BigNumberish, EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedServiceIdToMetdata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWorker",
    values: [CreateProfileDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "relationshipIDToEscrowDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relationshipIDToMarketID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relationshipIDToRelationship",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relationships",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingTimeToDepositArbitrationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveContract",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveService",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rule",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceIDToMarketID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceIdToPublicationId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceIdToPurchaseId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceIdToService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "services",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLensContentReferenceModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLensFollowModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTaskMetadataPointer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedFreelancers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "LENS_CONTENT_REFERENCE_MODULE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LENS_FOLLOW_MODULE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_dai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_tokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToLensProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrationFeeDepositPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "arbitrator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositArbitrationFeeForPayee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeIDtoRelationshipID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeRelationship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLensProfileIdFromAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPubIdFromServiceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPurchaseIdFromServiceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedFreelancers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWaitlistLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantProposalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lensHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyProfileCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseServiceOffering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedServiceIdToMetdata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relationshipIDToEscrowDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relationshipIDToMarketID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relationshipIDToRelationship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relationships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingTimeToDepositArbitrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "serviceIDToMarketID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceIdToPublicationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceIdToPurchaseId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceIdToService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "services", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLensContentReferenceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLensFollowModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTaskMetadataPointer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedFreelancers",
    data: BytesLike
  ): Result;

  events: {
    "ContractCreated()": EventFragment;
    "ContractOwnershipUpdate()": EventFragment;
    "Dispute(address,uint256,uint256,uint256)": EventFragment;
    "Evidence(address,uint256,address,string)": EventFragment;
    "MarketCreated(uint256,string)": EventFragment;
    "MetaEvidence(uint256,string)": EventFragment;
    "Ruling(address,uint256,uint256)": EventFragment;
    "ServiceCreated(uint256)": EventFragment;
    "ServicePurchased(uint256,uint256,uint256,address,address,address)": EventFragment;
    "UserRegistered(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractOwnershipUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Evidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaEvidence"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ruling"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServiceCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ServicePurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRegistered"): EventFragment;
}

export type ContractCreatedEvent = TypedEvent<[], {}>;

export type ContractCreatedEventFilter = TypedEventFilter<ContractCreatedEvent>;

export type ContractOwnershipUpdateEvent = TypedEvent<[], {}>;

export type ContractOwnershipUpdateEventFilter =
  TypedEventFilter<ContractOwnershipUpdateEvent>;

export type DisputeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    _arbitrator: string;
    _disputeID: BigNumber;
    _metaEvidenceID: BigNumber;
    _evidenceGroupID: BigNumber;
  }
>;

export type DisputeEventFilter = TypedEventFilter<DisputeEvent>;

export type EvidenceEvent = TypedEvent<
  [string, BigNumber, string, string],
  {
    _arbitrator: string;
    _evidenceGroupID: BigNumber;
    _party: string;
    _evidence: string;
  }
>;

export type EvidenceEventFilter = TypedEventFilter<EvidenceEvent>;

export type MarketCreatedEvent = TypedEvent<
  [BigNumber, string],
  { index: BigNumber; marketName: string }
>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export type MetaEvidenceEvent = TypedEvent<
  [BigNumber, string],
  { _metaEvidenceID: BigNumber; _evidence: string }
>;

export type MetaEvidenceEventFilter = TypedEventFilter<MetaEvidenceEvent>;

export type RulingEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _arbitrator: string; _disputeID: BigNumber; _ruling: BigNumber }
>;

export type RulingEventFilter = TypedEventFilter<RulingEvent>;

export type ServiceCreatedEvent = TypedEvent<
  [BigNumber],
  { serviceId: BigNumber }
>;

export type ServiceCreatedEventFilter = TypedEventFilter<ServiceCreatedEvent>;

export type ServicePurchasedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, string],
  {
    purchaseId: BigNumber;
    pubId: BigNumber;
    serviceId: BigNumber;
    owner: string;
    purchaser: string;
    referral: string;
  }
>;

export type ServicePurchasedEventFilter =
  TypedEventFilter<ServicePurchasedEvent>;

export type UserRegisteredEvent = TypedEvent<
  [string, string],
  { registeredAddress: string; lensHandle: string }
>;

export type UserRegisteredEventFilter = TypedEventFilter<UserRegisteredEvent>;

export interface NetworkManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NetworkManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LENS_CONTENT_REFERENCE_MODULE(overrides?: CallOverrides): Promise<[string]>;

    LENS_FOLLOW_MODULE(overrides?: CallOverrides): Promise<[string]>;

    _dai(overrides?: CallOverrides): Promise<[string]>;

    _tokenFactory(overrides?: CallOverrides): Promise<[string]>;

    addressToLensProfileId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    arbitrationFeeDepositPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    arbitrator(overrides?: CallOverrides): Promise<[string]>;

    createContract(
      marketId: BigNumberish,
      taskMetadataPtr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createService(
      marketId: BigNumberish,
      metadataPtr: string,
      wad: BigNumberish[],
      referralSharePayout: BigNumberish,
      lensTalentServiceCollectModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositArbitrationFeeForPayee(
      contractId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputeIDtoRelationshipID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disputeRelationship(
      contractId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContractData(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[RelationshipStructOutput]>;

    getContracts(
      overrides?: CallOverrides
    ): Promise<[RelationshipStructOutput[]]>;

    getLensProfileIdFromAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProtocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPubIdFromServiceId(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPurchaseIdFromServiceId(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getServiceData(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ServiceStructOutput]>;

    getServices(overrides?: CallOverrides): Promise<[ServiceStructOutput[]]>;

    getVerifiedFreelancers(overrides?: CallOverrides): Promise<[string[]]>;

    getWaitlistLength(
      serviceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    grantProposalRequest(
      contractId: BigNumberish,
      newWorker: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      tokenFactory: string,
      _treasury: string,
      _arbitrator: string,
      _lensHub: string,
      _proxyProfileCreator: string,
      _governance: string,
      dai: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isRegisteredUser(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lensHub(overrides?: CallOverrides): Promise<[string]>;

    proxyProfileCreator(overrides?: CallOverrides): Promise<[string]>;

    purchaseServiceOffering(
      serviceId: BigNumberish,
      referral: string,
      package: BigNumberish,
      sig: EIP712SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchasedServiceIdToMetdata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, BigNumber, string, number] & {
        purchaseId: BigNumber;
        client: string;
        exist: boolean;
        timestampPurchased: BigNumber;
        referral: string;
        package: number;
      }
    >;

    registerWorker(
      vars: CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relationshipIDToEscrowDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        disputeID: BigNumber;
        createdAt: BigNumber;
        reclaimedAt: BigNumber;
        payerFeeDeposit: BigNumber;
        payeeFeeDeposit: BigNumber;
      }
    >;

    relationshipIDToMarketID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    relationshipIDToRelationship(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        employer: string;
        worker: string;
        taskMetadataPtr: string;
        contractOwnership: number;
        wad: BigNumber;
        acceptanceTimestamp: BigNumber;
        resolutionTimestamp: BigNumber;
        marketId: BigNumber;
      }
    >;

    relationships(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        employer: string;
        worker: string;
        taskMetadataPtr: string;
        contractOwnership: number;
        wad: BigNumber;
        acceptanceTimestamp: BigNumber;
        resolutionTimestamp: BigNumber;
        marketId: BigNumber;
      }
    >;

    releaseContract(
      contractId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remainingTimeToDepositArbitrationFee(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    resolveContract(
      contractId: BigNumberish,
      solutionMetadataPtr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveService(
      serviceId: BigNumberish,
      purchaseId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rule(
      disputeId: BigNumberish,
      ruling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serviceIDToMarketID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    serviceIdToPublicationId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    serviceIdToPurchaseId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    serviceIdToService(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, boolean, BigNumber, string] & {
        marketId: BigNumber;
        owner: string;
        metadataPtr: string;
        referralShare: BigNumber;
        exist: boolean;
        id: BigNumber;
        collectModule: string;
      }
    >;

    services(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, boolean, BigNumber, string] & {
        marketId: BigNumber;
        owner: string;
        metadataPtr: string;
        referralShare: BigNumber;
        exist: boolean;
        id: BigNumber;
        collectModule: string;
      }
    >;

    setLensContentReferenceModule(
      _LENS_CONTENT_REFERENCE_MODULE: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLensFollowModule(
      _LENS_FOLLOW_MODULE: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitEvidence(
      contractId: BigNumberish,
      _evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateTaskMetadataPointer(
      contractId: BigNumberish,
      newPointerHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifiedFreelancers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  LENS_CONTENT_REFERENCE_MODULE(overrides?: CallOverrides): Promise<string>;

  LENS_FOLLOW_MODULE(overrides?: CallOverrides): Promise<string>;

  _dai(overrides?: CallOverrides): Promise<string>;

  _tokenFactory(overrides?: CallOverrides): Promise<string>;

  addressToLensProfileId(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  arbitrationFeeDepositPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  arbitrator(overrides?: CallOverrides): Promise<string>;

  createContract(
    marketId: BigNumberish,
    taskMetadataPtr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createService(
    marketId: BigNumberish,
    metadataPtr: string,
    wad: BigNumberish[],
    referralSharePayout: BigNumberish,
    lensTalentServiceCollectModule: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositArbitrationFeeForPayee(
    contractId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputeIDtoRelationshipID(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disputeRelationship(
    contractId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContractData(
    contractId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<RelationshipStructOutput>;

  getContracts(overrides?: CallOverrides): Promise<RelationshipStructOutput[]>;

  getLensProfileIdFromAddress(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  getPubIdFromServiceId(
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPurchaseIdFromServiceId(
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getServiceData(
    serviceId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ServiceStructOutput>;

  getServices(overrides?: CallOverrides): Promise<ServiceStructOutput[]>;

  getVerifiedFreelancers(overrides?: CallOverrides): Promise<string[]>;

  getWaitlistLength(
    serviceId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  grantProposalRequest(
    contractId: BigNumberish,
    newWorker: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    tokenFactory: string,
    _treasury: string,
    _arbitrator: string,
    _lensHub: string,
    _proxyProfileCreator: string,
    _governance: string,
    dai: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isRegisteredUser(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lensHub(overrides?: CallOverrides): Promise<string>;

  proxyProfileCreator(overrides?: CallOverrides): Promise<string>;

  purchaseServiceOffering(
    serviceId: BigNumberish,
    referral: string,
    package: BigNumberish,
    sig: EIP712SignatureStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchasedServiceIdToMetdata(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean, BigNumber, string, number] & {
      purchaseId: BigNumber;
      client: string;
      exist: boolean;
      timestampPurchased: BigNumber;
      referral: string;
      package: number;
    }
  >;

  registerWorker(
    vars: CreateProfileDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relationshipIDToEscrowDetails(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      disputeID: BigNumber;
      createdAt: BigNumber;
      reclaimedAt: BigNumber;
      payerFeeDeposit: BigNumber;
      payeeFeeDeposit: BigNumber;
    }
  >;

  relationshipIDToMarketID(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  relationshipIDToRelationship(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      employer: string;
      worker: string;
      taskMetadataPtr: string;
      contractOwnership: number;
      wad: BigNumber;
      acceptanceTimestamp: BigNumber;
      resolutionTimestamp: BigNumber;
      marketId: BigNumber;
    }
  >;

  relationships(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      employer: string;
      worker: string;
      taskMetadataPtr: string;
      contractOwnership: number;
      wad: BigNumber;
      acceptanceTimestamp: BigNumber;
      resolutionTimestamp: BigNumber;
      marketId: BigNumber;
    }
  >;

  releaseContract(
    contractId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remainingTimeToDepositArbitrationFee(
    contractId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  resolveContract(
    contractId: BigNumberish,
    solutionMetadataPtr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveService(
    serviceId: BigNumberish,
    purchaseId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rule(
    disputeId: BigNumberish,
    ruling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  serviceIDToMarketID(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  serviceIdToPublicationId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  serviceIdToPurchaseId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  serviceIdToService(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, boolean, BigNumber, string] & {
      marketId: BigNumber;
      owner: string;
      metadataPtr: string;
      referralShare: BigNumber;
      exist: boolean;
      id: BigNumber;
      collectModule: string;
    }
  >;

  services(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, boolean, BigNumber, string] & {
      marketId: BigNumber;
      owner: string;
      metadataPtr: string;
      referralShare: BigNumber;
      exist: boolean;
      id: BigNumber;
      collectModule: string;
    }
  >;

  setLensContentReferenceModule(
    _LENS_CONTENT_REFERENCE_MODULE: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLensFollowModule(
    _LENS_FOLLOW_MODULE: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitEvidence(
    contractId: BigNumberish,
    _evidence: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateTaskMetadataPointer(
    contractId: BigNumberish,
    newPointerHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifiedFreelancers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    LENS_CONTENT_REFERENCE_MODULE(overrides?: CallOverrides): Promise<string>;

    LENS_FOLLOW_MODULE(overrides?: CallOverrides): Promise<string>;

    _dai(overrides?: CallOverrides): Promise<string>;

    _tokenFactory(overrides?: CallOverrides): Promise<string>;

    addressToLensProfileId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    arbitrationFeeDepositPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    arbitrator(overrides?: CallOverrides): Promise<string>;

    createContract(
      marketId: BigNumberish,
      taskMetadataPtr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createService(
      marketId: BigNumberish,
      metadataPtr: string,
      wad: BigNumberish[],
      referralSharePayout: BigNumberish,
      lensTalentServiceCollectModule: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositArbitrationFeeForPayee(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disputeIDtoRelationshipID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeRelationship(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getContractData(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RelationshipStructOutput>;

    getContracts(
      overrides?: CallOverrides
    ): Promise<RelationshipStructOutput[]>;

    getLensProfileIdFromAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPubIdFromServiceId(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchaseIdFromServiceId(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceData(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ServiceStructOutput>;

    getServices(overrides?: CallOverrides): Promise<ServiceStructOutput[]>;

    getVerifiedFreelancers(overrides?: CallOverrides): Promise<string[]>;

    getWaitlistLength(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    grantProposalRequest(
      contractId: BigNumberish,
      newWorker: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      tokenFactory: string,
      _treasury: string,
      _arbitrator: string,
      _lensHub: string,
      _proxyProfileCreator: string,
      _governance: string,
      dai: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isRegisteredUser(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lensHub(overrides?: CallOverrides): Promise<string>;

    proxyProfileCreator(overrides?: CallOverrides): Promise<string>;

    purchaseServiceOffering(
      serviceId: BigNumberish,
      referral: string,
      package: BigNumberish,
      sig: EIP712SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchasedServiceIdToMetdata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, BigNumber, string, number] & {
        purchaseId: BigNumber;
        client: string;
        exist: boolean;
        timestampPurchased: BigNumber;
        referral: string;
        package: number;
      }
    >;

    registerWorker(
      vars: CreateProfileDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    relationshipIDToEscrowDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        disputeID: BigNumber;
        createdAt: BigNumber;
        reclaimedAt: BigNumber;
        payerFeeDeposit: BigNumber;
        payeeFeeDeposit: BigNumber;
      }
    >;

    relationshipIDToMarketID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relationshipIDToRelationship(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        employer: string;
        worker: string;
        taskMetadataPtr: string;
        contractOwnership: number;
        wad: BigNumber;
        acceptanceTimestamp: BigNumber;
        resolutionTimestamp: BigNumber;
        marketId: BigNumber;
      }
    >;

    relationships(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        employer: string;
        worker: string;
        taskMetadataPtr: string;
        contractOwnership: number;
        wad: BigNumber;
        acceptanceTimestamp: BigNumber;
        resolutionTimestamp: BigNumber;
        marketId: BigNumber;
      }
    >;

    releaseContract(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    remainingTimeToDepositArbitrationFee(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveContract(
      contractId: BigNumberish,
      solutionMetadataPtr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveService(
      serviceId: BigNumberish,
      purchaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rule(
      disputeId: BigNumberish,
      ruling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    serviceIDToMarketID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    serviceIdToPublicationId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    serviceIdToPurchaseId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    serviceIdToService(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, boolean, BigNumber, string] & {
        marketId: BigNumber;
        owner: string;
        metadataPtr: string;
        referralShare: BigNumber;
        exist: boolean;
        id: BigNumber;
        collectModule: string;
      }
    >;

    services(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, boolean, BigNumber, string] & {
        marketId: BigNumber;
        owner: string;
        metadataPtr: string;
        referralShare: BigNumber;
        exist: boolean;
        id: BigNumber;
        collectModule: string;
      }
    >;

    setLensContentReferenceModule(
      _LENS_CONTENT_REFERENCE_MODULE: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLensFollowModule(
      _LENS_FOLLOW_MODULE: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitEvidence(
      contractId: BigNumberish,
      _evidence: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateTaskMetadataPointer(
      contractId: BigNumberish,
      newPointerHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifiedFreelancers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ContractCreated()"(): ContractCreatedEventFilter;
    ContractCreated(): ContractCreatedEventFilter;

    "ContractOwnershipUpdate()"(): ContractOwnershipUpdateEventFilter;
    ContractOwnershipUpdate(): ContractOwnershipUpdateEventFilter;

    "Dispute(address,uint256,uint256,uint256)"(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;
    Dispute(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _metaEvidenceID?: null,
      _evidenceGroupID?: null
    ): DisputeEventFilter;

    "Evidence(address,uint256,address,string)"(
      _arbitrator?: string | null,
      _evidenceGroupID?: BigNumberish | null,
      _party?: string | null,
      _evidence?: null
    ): EvidenceEventFilter;
    Evidence(
      _arbitrator?: string | null,
      _evidenceGroupID?: BigNumberish | null,
      _party?: string | null,
      _evidence?: null
    ): EvidenceEventFilter;

    "MarketCreated(uint256,string)"(
      index?: BigNumberish | null,
      marketName?: string | null
    ): MarketCreatedEventFilter;
    MarketCreated(
      index?: BigNumberish | null,
      marketName?: string | null
    ): MarketCreatedEventFilter;

    "MetaEvidence(uint256,string)"(
      _metaEvidenceID?: BigNumberish | null,
      _evidence?: null
    ): MetaEvidenceEventFilter;
    MetaEvidence(
      _metaEvidenceID?: BigNumberish | null,
      _evidence?: null
    ): MetaEvidenceEventFilter;

    "Ruling(address,uint256,uint256)"(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _ruling?: null
    ): RulingEventFilter;
    Ruling(
      _arbitrator?: string | null,
      _disputeID?: BigNumberish | null,
      _ruling?: null
    ): RulingEventFilter;

    "ServiceCreated(uint256)"(
      serviceId?: BigNumberish | null
    ): ServiceCreatedEventFilter;
    ServiceCreated(serviceId?: BigNumberish | null): ServiceCreatedEventFilter;

    "ServicePurchased(uint256,uint256,uint256,address,address,address)"(
      purchaseId?: null,
      pubId?: null,
      serviceId?: BigNumberish | null,
      owner?: string | null,
      purchaser?: string | null,
      referral?: null
    ): ServicePurchasedEventFilter;
    ServicePurchased(
      purchaseId?: null,
      pubId?: null,
      serviceId?: BigNumberish | null,
      owner?: string | null,
      purchaser?: string | null,
      referral?: null
    ): ServicePurchasedEventFilter;

    "UserRegistered(address,string)"(
      registeredAddress?: string | null,
      lensHandle?: string | null
    ): UserRegisteredEventFilter;
    UserRegistered(
      registeredAddress?: string | null,
      lensHandle?: string | null
    ): UserRegisteredEventFilter;
  };

  estimateGas: {
    LENS_CONTENT_REFERENCE_MODULE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    LENS_FOLLOW_MODULE(overrides?: CallOverrides): Promise<BigNumber>;

    _dai(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    addressToLensProfileId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    arbitrationFeeDepositPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    arbitrator(overrides?: CallOverrides): Promise<BigNumber>;

    createContract(
      marketId: BigNumberish,
      taskMetadataPtr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createService(
      marketId: BigNumberish,
      metadataPtr: string,
      wad: BigNumberish[],
      referralSharePayout: BigNumberish,
      lensTalentServiceCollectModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositArbitrationFeeForPayee(
      contractId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputeIDtoRelationshipID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputeRelationship(
      contractId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContractData(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContracts(overrides?: CallOverrides): Promise<BigNumber>;

    getLensProfileIdFromAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPubIdFromServiceId(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPurchaseIdFromServiceId(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceData(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServices(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifiedFreelancers(overrides?: CallOverrides): Promise<BigNumber>;

    getWaitlistLength(
      serviceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    grantProposalRequest(
      contractId: BigNumberish,
      newWorker: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      tokenFactory: string,
      _treasury: string,
      _arbitrator: string,
      _lensHub: string,
      _proxyProfileCreator: string,
      _governance: string,
      dai: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isRegisteredUser(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lensHub(overrides?: CallOverrides): Promise<BigNumber>;

    proxyProfileCreator(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseServiceOffering(
      serviceId: BigNumberish,
      referral: string,
      package: BigNumberish,
      sig: EIP712SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchasedServiceIdToMetdata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerWorker(
      vars: CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relationshipIDToEscrowDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relationshipIDToMarketID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relationshipIDToRelationship(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relationships(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseContract(
      contractId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remainingTimeToDepositArbitrationFee(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveContract(
      contractId: BigNumberish,
      solutionMetadataPtr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveService(
      serviceId: BigNumberish,
      purchaseId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rule(
      disputeId: BigNumberish,
      ruling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    serviceIDToMarketID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    serviceIdToPublicationId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    serviceIdToPurchaseId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    serviceIdToService(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    services(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setLensContentReferenceModule(
      _LENS_CONTENT_REFERENCE_MODULE: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLensFollowModule(
      _LENS_FOLLOW_MODULE: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitEvidence(
      contractId: BigNumberish,
      _evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateTaskMetadataPointer(
      contractId: BigNumberish,
      newPointerHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifiedFreelancers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LENS_CONTENT_REFERENCE_MODULE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LENS_FOLLOW_MODULE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressToLensProfileId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitrationFeeDepositPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createContract(
      marketId: BigNumberish,
      taskMetadataPtr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createService(
      marketId: BigNumberish,
      metadataPtr: string,
      wad: BigNumberish[],
      referralSharePayout: BigNumberish,
      lensTalentServiceCollectModule: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositArbitrationFeeForPayee(
      contractId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputeIDtoRelationshipID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disputeRelationship(
      contractId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContractData(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLensProfileIdFromAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPubIdFromServiceId(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPurchaseIdFromServiceId(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceData(
      serviceId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVerifiedFreelancers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWaitlistLength(
      serviceId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantProposalRequest(
      contractId: BigNumberish,
      newWorker: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      tokenFactory: string,
      _treasury: string,
      _arbitrator: string,
      _lensHub: string,
      _proxyProfileCreator: string,
      _governance: string,
      dai: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isRegisteredUser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lensHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyProfileCreator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseServiceOffering(
      serviceId: BigNumberish,
      referral: string,
      package: BigNumberish,
      sig: EIP712SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchasedServiceIdToMetdata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerWorker(
      vars: CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relationshipIDToEscrowDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relationshipIDToMarketID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relationshipIDToRelationship(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relationships(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseContract(
      contractId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remainingTimeToDepositArbitrationFee(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveContract(
      contractId: BigNumberish,
      solutionMetadataPtr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveService(
      serviceId: BigNumberish,
      purchaseId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rule(
      disputeId: BigNumberish,
      ruling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    serviceIDToMarketID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    serviceIdToPublicationId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    serviceIdToPurchaseId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    serviceIdToService(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    services(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLensContentReferenceModule(
      _LENS_CONTENT_REFERENCE_MODULE: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLensFollowModule(
      _LENS_FOLLOW_MODULE: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitEvidence(
      contractId: BigNumberish,
      _evidence: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTaskMetadataPointer(
      contractId: BigNumberish,
      newPointerHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifiedFreelancers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
