/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MultiActionInterface extends utils.Interface {
  functions: {
    "_dai()": FunctionFragment;
    "_uniswapV2Factory()": FunctionFragment;
    "_uniswapV2Router02()": FunctionFragment;
    "_weth()": FunctionFragment;
    "addAndBuy(string,uint256,uint256,uint256,address)": FunctionFragment;
    "buyAndLock(address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "convertAddAndBuy(string,uint256,address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "convertAndBuy(address,address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "sellAndConvert(address,address,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_dai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_uniswapV2Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_uniswapV2Router02",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAndBuy",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAndLock",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertAddAndBuy",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertAndBuy",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellAndConvert",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "_dai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_uniswapV2Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_uniswapV2Router02",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAndBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyAndLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertAddAndBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertAndBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellAndConvert",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MultiAction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiActionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _dai(overrides?: CallOverrides): Promise<[string]>;

    _uniswapV2Factory(overrides?: CallOverrides): Promise<[string]>;

    _uniswapV2Router02(overrides?: CallOverrides): Promise<[string]>;

    _weth(overrides?: CallOverrides): Promise<[string]>;

    addAndBuy(
      tokenName: string,
      marketID: BigNumberish,
      amount: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAndLock(
      ideaToken: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertAddAndBuy(
      tokenName: string,
      marketID: BigNumberish,
      inputCurrency: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertAndBuy(
      inputCurrency: string,
      ideaToken: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellAndConvert(
      outputCurrency: string,
      ideaToken: string,
      amount: BigNumberish,
      minPrice: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _dai(overrides?: CallOverrides): Promise<string>;

  _uniswapV2Factory(overrides?: CallOverrides): Promise<string>;

  _uniswapV2Router02(overrides?: CallOverrides): Promise<string>;

  _weth(overrides?: CallOverrides): Promise<string>;

  addAndBuy(
    tokenName: string,
    marketID: BigNumberish,
    amount: BigNumberish,
    lockDuration: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAndLock(
    ideaToken: string,
    amount: BigNumberish,
    fallbackAmount: BigNumberish,
    cost: BigNumberish,
    lockDuration: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertAddAndBuy(
    tokenName: string,
    marketID: BigNumberish,
    inputCurrency: string,
    amount: BigNumberish,
    fallbackAmount: BigNumberish,
    cost: BigNumberish,
    lockDuration: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertAndBuy(
    inputCurrency: string,
    ideaToken: string,
    amount: BigNumberish,
    fallbackAmount: BigNumberish,
    cost: BigNumberish,
    lockDuration: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellAndConvert(
    outputCurrency: string,
    ideaToken: string,
    amount: BigNumberish,
    minPrice: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _dai(overrides?: CallOverrides): Promise<string>;

    _uniswapV2Factory(overrides?: CallOverrides): Promise<string>;

    _uniswapV2Router02(overrides?: CallOverrides): Promise<string>;

    _weth(overrides?: CallOverrides): Promise<string>;

    addAndBuy(
      tokenName: string,
      marketID: BigNumberish,
      amount: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyAndLock(
      ideaToken: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    convertAddAndBuy(
      tokenName: string,
      marketID: BigNumberish,
      inputCurrency: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    convertAndBuy(
      inputCurrency: string,
      ideaToken: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sellAndConvert(
      outputCurrency: string,
      ideaToken: string,
      amount: BigNumberish,
      minPrice: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _dai(overrides?: CallOverrides): Promise<BigNumber>;

    _uniswapV2Factory(overrides?: CallOverrides): Promise<BigNumber>;

    _uniswapV2Router02(overrides?: CallOverrides): Promise<BigNumber>;

    _weth(overrides?: CallOverrides): Promise<BigNumber>;

    addAndBuy(
      tokenName: string,
      marketID: BigNumberish,
      amount: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAndLock(
      ideaToken: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertAddAndBuy(
      tokenName: string,
      marketID: BigNumberish,
      inputCurrency: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertAndBuy(
      inputCurrency: string,
      ideaToken: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellAndConvert(
      outputCurrency: string,
      ideaToken: string,
      amount: BigNumberish,
      minPrice: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _uniswapV2Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _uniswapV2Router02(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAndBuy(
      tokenName: string,
      marketID: BigNumberish,
      amount: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAndLock(
      ideaToken: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertAddAndBuy(
      tokenName: string,
      marketID: BigNumberish,
      inputCurrency: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertAndBuy(
      inputCurrency: string,
      ideaToken: string,
      amount: BigNumberish,
      fallbackAmount: BigNumberish,
      cost: BigNumberish,
      lockDuration: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellAndConvert(
      outputCurrency: string,
      ideaToken: string,
      amount: BigNumberish,
      minPrice: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
