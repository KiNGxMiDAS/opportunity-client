/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveIncentivesController__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "IInitializableAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitializableAToken__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider__factory>;
    getContractFactory(
      name: "IScaledBalanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScaledBalanceToken__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721Time",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Time__factory>;
    getContractFactory(
      name: "IERC721Time",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Time__factory>;
    getContractFactory(
      name: "LensMultiState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LensMultiState__factory>;
    getContractFactory(
      name: "LensNFTBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LensNFTBase__factory>;
    getContractFactory(
      name: "CollectNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CollectNFT__factory>;
    getContractFactory(
      name: "FollowNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FollowNFT__factory>;
    getContractFactory(
      name: "LensHub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LensHub__factory>;
    getContractFactory(
      name: "FeeCollectModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeCollectModule__factory>;
    getContractFactory(
      name: "FreeCollectModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FreeCollectModule__factory>;
    getContractFactory(
      name: "LimitedFeeCollectModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitedFeeCollectModule__factory>;
    getContractFactory(
      name: "LimitedTimedFeeCollectModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitedTimedFeeCollectModule__factory>;
    getContractFactory(
      name: "RevertCollectModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertCollectModule__factory>;
    getContractFactory(
      name: "TimedFeeCollectModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimedFeeCollectModule__factory>;
    getContractFactory(
      name: "FeeModuleBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeModuleBase__factory>;
    getContractFactory(
      name: "ApprovalFollowModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApprovalFollowModule__factory>;
    getContractFactory(
      name: "FeeFollowModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeFollowModule__factory>;
    getContractFactory(
      name: "FollowValidatorFollowModuleBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FollowValidatorFollowModuleBase__factory>;
    getContractFactory(
      name: "IGigEarth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGigEarth__factory>;
    getContractFactory(
      name: "RelationshipFollowModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelationshipFollowModule__factory>;
    getContractFactory(
      name: "ProfileFollowModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProfileFollowModule__factory>;
    getContractFactory(
      name: "RevertFollowModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertFollowModule__factory>;
    getContractFactory(
      name: "FollowValidationModuleBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FollowValidationModuleBase__factory>;
    getContractFactory(
      name: "ModuleBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleBase__factory>;
    getContractFactory(
      name: "ModuleGlobals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleGlobals__factory>;
    getContractFactory(
      name: "FollowerOnlyReferenceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FollowerOnlyReferenceModule__factory>;
    getContractFactory(
      name: "GigEarthContentReferenceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GigEarthContentReferenceModule__factory>;
    getContractFactory(
      name: "IProfileCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProfileCreator__factory>;
    getContractFactory(
      name: "IServiceCollectModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IServiceCollectModule__factory>;
    getContractFactory(
      name: "NetworkManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NetworkManager__factory>;
    getContractFactory(
      name: "ServiceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ServiceToken__factory>;
    getContractFactory(
      name: "TokenExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenExchange__factory>;
    getContractFactory(
      name: "TokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenFactory__factory>;
    getContractFactory(
      name: "TokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenVault__factory>;
    getContractFactory(
      name: "UserSummary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserSummary__factory>;
    getContractFactory(
      name: "IArbitrable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrable__factory>;
    getContractFactory(
      name: "IArbitrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IArbitrator__factory>;
    getContractFactory(
      name: "IComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComptroller__factory>;
    getContractFactory(
      name: "ICToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICToken__factory>;
    getContractFactory(
      name: "IDelegateableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegateableERC20__factory>;
    getContractFactory(
      name: "IEvidence",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEvidence__factory>;
    getContractFactory(
      name: "IInterestManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterestManager__factory>;
    getContractFactory(
      name: "IProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxyAdmin__factory>;
    getContractFactory(
      name: "IQuoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuoter__factory>;
    getContractFactory(
      name: "IServiceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IServiceToken__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "ITestUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITestUniswapV2Callee__factory>;
    getContractFactory(
      name: "ITestUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITestUniswapV2ERC20__factory>;
    getContractFactory(
      name: "ITestUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITestUniswapV2Factory__factory>;
    getContractFactory(
      name: "ITestUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITestUniswapV2Pair__factory>;
    getContractFactory(
      name: "ITokenExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenExchange__factory>;
    getContractFactory(
      name: "ITokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenFactory__factory>;
    getContractFactory(
      name: "ITokenNameVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenNameVerifier__factory>;
    getContractFactory(
      name: "ITokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenVault__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Factory__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "INetworkManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INetworkManager__factory>;
    getContractFactory(
      name: "ServiceCollectModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ServiceCollectModule__factory>;
    getContractFactory(
      name: "NetworkLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NetworkLibrary__factory>;
    getContractFactory(
      name: "AdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "MinimalProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MinimalProxy__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "UpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeabilityProxy__factory>;
    getContractFactory(
      name: "SimpleCentralizedArbitrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleCentralizedArbitrator__factory>;
    getContractFactory(
      name: "TestCDai",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCDai__factory>;
    getContractFactory(
      name: "TestComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestComptroller__factory>;
    getContractFactory(
      name: "TestDai",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestDai__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUniswapV2ERC20__factory>;
    getContractFactory(
      name: "TestUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUniswapV2Factory__factory>;
    getContractFactory(
      name: "TestUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUniswapV2Pair__factory>;
    getContractFactory(
      name: "TestUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUniswapV2Router02__factory>;
    getContractFactory(
      name: "TestWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestWETH__factory>;
    getContractFactory(
      name: "ControlledERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControlledERC20__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "InterestManagerAave",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestManagerAave__factory>;
    getContractFactory(
      name: "InterestManagerCompound",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterestManagerCompound__factory>;
    getContractFactory(
      name: "MultiAction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiAction__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ICollectModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICollectModule__factory>;
    getContractFactory(
      name: "ICollectNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICollectNFT__factory>;
    getContractFactory(
      name: "IFollowModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFollowModule__factory>;
    getContractFactory(
      name: "IFollowNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFollowNFT__factory>;
    getContractFactory(
      name: "ILensHub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILensHub__factory>;
    getContractFactory(
      name: "ILensNFTBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILensNFTBase__factory>;
    getContractFactory(
      name: "IModuleGlobals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModuleGlobals__factory>;
    getContractFactory(
      name: "IReferenceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReferenceModule__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "Events",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Events__factory>;
    getContractFactory(
      name: "InteractionLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InteractionLogic__factory>;
    getContractFactory(
      name: "ProfileTokenURILogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProfileTokenURILogic__factory>;
    getContractFactory(
      name: "PublishingLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublishingLogic__factory>;
    getContractFactory(
      name: "LensPeriphery",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LensPeriphery__factory>;
    getContractFactory(
      name: "ProfileCreationProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProfileCreationProxy__factory>;
    getContractFactory(
      name: "UIDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UIDataProvider__factory>;
    getContractFactory(
      name: "Currency",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Currency__factory>;
    getContractFactory(
      name: "Helper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Helper__factory>;
    getContractFactory(
      name: "MockFollowModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFollowModule__factory>;
    getContractFactory(
      name: "MockLensHubV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLensHubV2__factory>;
    getContractFactory(
      name: "MockLensHubV2BadRevision",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockLensHubV2BadRevision__factory>;
    getContractFactory(
      name: "MockProfileCreationProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockProfileCreationProxy__factory>;
    getContractFactory(
      name: "MockReferenceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockReferenceModule__factory>;
    getContractFactory(
      name: "FollowNFTProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FollowNFTProxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IAaveIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveIncentivesController>;
    getContractAt(
      name: "IAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAToken>;
    getContractAt(
      name: "IInitializableAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitializableAToken>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAddressesProvider>;
    getContractAt(
      name: "IScaledBalanceToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IScaledBalanceToken>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721Time",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Time>;
    getContractAt(
      name: "IERC721Time",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Time>;
    getContractAt(
      name: "LensMultiState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LensMultiState>;
    getContractAt(
      name: "LensNFTBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LensNFTBase>;
    getContractAt(
      name: "CollectNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CollectNFT>;
    getContractAt(
      name: "FollowNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FollowNFT>;
    getContractAt(
      name: "LensHub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LensHub>;
    getContractAt(
      name: "FeeCollectModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeCollectModule>;
    getContractAt(
      name: "FreeCollectModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FreeCollectModule>;
    getContractAt(
      name: "LimitedFeeCollectModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitedFeeCollectModule>;
    getContractAt(
      name: "LimitedTimedFeeCollectModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitedTimedFeeCollectModule>;
    getContractAt(
      name: "RevertCollectModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertCollectModule>;
    getContractAt(
      name: "TimedFeeCollectModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimedFeeCollectModule>;
    getContractAt(
      name: "FeeModuleBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeModuleBase>;
    getContractAt(
      name: "ApprovalFollowModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ApprovalFollowModule>;
    getContractAt(
      name: "FeeFollowModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeFollowModule>;
    getContractAt(
      name: "FollowValidatorFollowModuleBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FollowValidatorFollowModuleBase>;
    getContractAt(
      name: "IGigEarth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGigEarth>;
    getContractAt(
      name: "RelationshipFollowModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RelationshipFollowModule>;
    getContractAt(
      name: "ProfileFollowModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProfileFollowModule>;
    getContractAt(
      name: "RevertFollowModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertFollowModule>;
    getContractAt(
      name: "FollowValidationModuleBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FollowValidationModuleBase>;
    getContractAt(
      name: "ModuleBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleBase>;
    getContractAt(
      name: "ModuleGlobals",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleGlobals>;
    getContractAt(
      name: "FollowerOnlyReferenceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FollowerOnlyReferenceModule>;
    getContractAt(
      name: "GigEarthContentReferenceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GigEarthContentReferenceModule>;
    getContractAt(
      name: "IProfileCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProfileCreator>;
    getContractAt(
      name: "IServiceCollectModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IServiceCollectModule>;
    getContractAt(
      name: "NetworkManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NetworkManager>;
    getContractAt(
      name: "ServiceToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ServiceToken>;
    getContractAt(
      name: "TokenExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenExchange>;
    getContractAt(
      name: "TokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenFactory>;
    getContractAt(
      name: "TokenVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenVault>;
    getContractAt(
      name: "UserSummary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserSummary>;
    getContractAt(
      name: "IArbitrable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbitrable>;
    getContractAt(
      name: "IArbitrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IArbitrator>;
    getContractAt(
      name: "IComptroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComptroller>;
    getContractAt(
      name: "ICToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICToken>;
    getContractAt(
      name: "IDelegateableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegateableERC20>;
    getContractAt(
      name: "IEvidence",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEvidence>;
    getContractAt(
      name: "IInterestManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterestManager>;
    getContractAt(
      name: "IProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxyAdmin>;
    getContractAt(
      name: "IQuoter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuoter>;
    getContractAt(
      name: "IServiceToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IServiceToken>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "ITestUniswapV2Callee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITestUniswapV2Callee>;
    getContractAt(
      name: "ITestUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITestUniswapV2ERC20>;
    getContractAt(
      name: "ITestUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITestUniswapV2Factory>;
    getContractAt(
      name: "ITestUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITestUniswapV2Pair>;
    getContractAt(
      name: "ITokenExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenExchange>;
    getContractAt(
      name: "ITokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenFactory>;
    getContractAt(
      name: "ITokenNameVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenNameVerifier>;
    getContractAt(
      name: "ITokenVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenVault>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IUniswapV3Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Factory>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "INetworkManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INetworkManager>;
    getContractAt(
      name: "ServiceCollectModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ServiceCollectModule>;
    getContractAt(
      name: "NetworkLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NetworkLibrary>;
    getContractAt(
      name: "AdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminUpgradeabilityProxy>;
    getContractAt(
      name: "MinimalProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MinimalProxy>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "UpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeabilityProxy>;
    getContractAt(
      name: "SimpleCentralizedArbitrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleCentralizedArbitrator>;
    getContractAt(
      name: "TestCDai",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCDai>;
    getContractAt(
      name: "TestComptroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestComptroller>;
    getContractAt(
      name: "TestDai",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestDai>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUniswapV2ERC20>;
    getContractAt(
      name: "TestUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUniswapV2Factory>;
    getContractAt(
      name: "TestUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUniswapV2Pair>;
    getContractAt(
      name: "TestUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUniswapV2Router02>;
    getContractAt(
      name: "TestWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestWETH>;
    getContractAt(
      name: "ControlledERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ControlledERC20>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "InterestManagerAave",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestManagerAave>;
    getContractAt(
      name: "InterestManagerCompound",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterestManagerCompound>;
    getContractAt(
      name: "MultiAction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiAction>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ICollectModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICollectModule>;
    getContractAt(
      name: "ICollectNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICollectNFT>;
    getContractAt(
      name: "IFollowModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFollowModule>;
    getContractAt(
      name: "IFollowNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFollowNFT>;
    getContractAt(
      name: "ILensHub",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILensHub>;
    getContractAt(
      name: "ILensNFTBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILensNFTBase>;
    getContractAt(
      name: "IModuleGlobals",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModuleGlobals>;
    getContractAt(
      name: "IReferenceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReferenceModule>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "Events",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Events>;
    getContractAt(
      name: "InteractionLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InteractionLogic>;
    getContractAt(
      name: "ProfileTokenURILogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProfileTokenURILogic>;
    getContractAt(
      name: "PublishingLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PublishingLogic>;
    getContractAt(
      name: "LensPeriphery",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LensPeriphery>;
    getContractAt(
      name: "ProfileCreationProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProfileCreationProxy>;
    getContractAt(
      name: "UIDataProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UIDataProvider>;
    getContractAt(
      name: "Currency",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Currency>;
    getContractAt(
      name: "Helper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Helper>;
    getContractAt(
      name: "MockFollowModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFollowModule>;
    getContractAt(
      name: "MockLensHubV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLensHubV2>;
    getContractAt(
      name: "MockLensHubV2BadRevision",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockLensHubV2BadRevision>;
    getContractAt(
      name: "MockProfileCreationProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockProfileCreationProxy>;
    getContractAt(
      name: "MockReferenceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockReferenceModule>;
    getContractAt(
      name: "FollowNFTProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FollowNFTProxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
